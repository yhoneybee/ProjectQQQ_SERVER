




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace C2S
{
    public class Stub : Nettention.Proud.RmiStub
    {
        public AfterRmiInvocationDelegate AfterRmiInvocation = delegate (Nettention.Proud.AfterRmiSummary summary) { };
        public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate (Nettention.Proud.BeforeRmiSummary summary) { };

        public delegate bool SignUpDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string pw, string confirmPw);
        public SignUpDelegate SignUp = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string pw, string confirmPw)
        {
            return false;
        };
        public delegate bool LogInDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string pw);
        public LogInDelegate LogIn = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string pw)
        {
            return false;
        };
        public delegate bool ChatToAllDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string chat);
        public ChatToAllDelegate ChatToAll = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string chat)
        {
            return false;
        };
        public delegate bool ChatToRoomDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomId, string chat);
        public ChatToRoomDelegate ChatToRoom = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomId, string chat)
        {
            return false;
        };
        public delegate bool ChatToPersonDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string personId, string chat);
        public ChatToPersonDelegate ChatToPerson = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string personId, string chat)
        {
            return false;
        };
        public delegate bool CreateRoomDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomName, string pw);
        public CreateRoomDelegate CreateRoom = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomName, string pw)
        {
            return false;
        };
        public delegate bool GetRoomDatasDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GetRoomDatasDelegate GetRoomDatas = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GameReadyDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id);
        public GameReadyDelegate GameReady = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id)
        {
            return false;
        };
        public delegate bool GameStartDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id);
        public GameStartDelegate GameStart = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id)
        {
            return false;
        };
        public delegate bool RecordPositionDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, float x, float y, float z);
        public RecordPositionDelegate RecordPosition = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, float x, float y, float z)
        {
            return false;
        };
        public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag)
        {
            Nettention.Proud.HostID remote = pa.RemoteHostID;
            if (remote == Nettention.Proud.HostID.HostID_None)
            {
                ShowUnknownHostIDWarning(remote);
            }

            Nettention.Proud.Message __msg = pa.ReadOnlyMessage;
            int orgReadOffset = __msg.ReadOffset;
            Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
            if (!__msg.Read(out __rmiID))
                goto __fail;

            switch (__rmiID)
            {
                case Common.SignUp:
                    ProcessReceivedMessage_SignUp(__msg, pa, hostTag, remote);
                    break;
                case Common.LogIn:
                    ProcessReceivedMessage_LogIn(__msg, pa, hostTag, remote);
                    break;
                case Common.ChatToAll:
                    ProcessReceivedMessage_ChatToAll(__msg, pa, hostTag, remote);
                    break;
                case Common.ChatToRoom:
                    ProcessReceivedMessage_ChatToRoom(__msg, pa, hostTag, remote);
                    break;
                case Common.ChatToPerson:
                    ProcessReceivedMessage_ChatToPerson(__msg, pa, hostTag, remote);
                    break;
                case Common.CreateRoom:
                    ProcessReceivedMessage_CreateRoom(__msg, pa, hostTag, remote);
                    break;
                case Common.GetRoomDatas:
                    ProcessReceivedMessage_GetRoomDatas(__msg, pa, hostTag, remote);
                    break;
                case Common.GameReady:
                    ProcessReceivedMessage_GameReady(__msg, pa, hostTag, remote);
                    break;
                case Common.GameStart:
                    ProcessReceivedMessage_GameStart(__msg, pa, hostTag, remote);
                    break;
                case Common.RecordPosition:
                    ProcessReceivedMessage_RecordPosition(__msg, pa, hostTag, remote);
                    break;
                default:
                    goto __fail;
            }
            return true;
        __fail:
            {
                __msg.ReadOffset = orgReadOffset;
                return false;
            }
        }
        void ProcessReceivedMessage_SignUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string pw; Nettention.Proud.Marshaler.Read(__msg, out pw);
            string confirmPw; Nettention.Proud.Marshaler.Read(__msg, out confirmPw);
            core.PostCheckReadMessage(__msg, RmiName_SignUp);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += pw.ToString() + ",";
                parameterString += confirmPw.ToString() + ",";
                NotifyCallFromStub(Common.SignUp, RmiName_SignUp, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.SignUp;
                summary.rmiName = RmiName_SignUp;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = SignUp(remote, ctx, id, pw, confirmPw);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_SignUp);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.SignUp;
                summary.rmiName = RmiName_SignUp;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_LogIn(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string pw; Nettention.Proud.Marshaler.Read(__msg, out pw);
            core.PostCheckReadMessage(__msg, RmiName_LogIn);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += pw.ToString() + ",";
                NotifyCallFromStub(Common.LogIn, RmiName_LogIn, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.LogIn;
                summary.rmiName = RmiName_LogIn;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = LogIn(remote, ctx, id, pw);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_LogIn);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.LogIn;
                summary.rmiName = RmiName_LogIn;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_ChatToAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string chat; Nettention.Proud.Marshaler.Read(__msg, out chat);
            core.PostCheckReadMessage(__msg, RmiName_ChatToAll);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += chat.ToString() + ",";
                NotifyCallFromStub(Common.ChatToAll, RmiName_ChatToAll, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.ChatToAll;
                summary.rmiName = RmiName_ChatToAll;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = ChatToAll(remote, ctx, id, chat);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_ChatToAll);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.ChatToAll;
                summary.rmiName = RmiName_ChatToAll;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_ChatToRoom(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string roomId; Nettention.Proud.Marshaler.Read(__msg, out roomId);
            string chat; Nettention.Proud.Marshaler.Read(__msg, out chat);
            core.PostCheckReadMessage(__msg, RmiName_ChatToRoom);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += roomId.ToString() + ",";
                parameterString += chat.ToString() + ",";
                NotifyCallFromStub(Common.ChatToRoom, RmiName_ChatToRoom, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.ChatToRoom;
                summary.rmiName = RmiName_ChatToRoom;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = ChatToRoom(remote, ctx, id, roomId, chat);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_ChatToRoom);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.ChatToRoom;
                summary.rmiName = RmiName_ChatToRoom;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_ChatToPerson(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string personId; Nettention.Proud.Marshaler.Read(__msg, out personId);
            string chat; Nettention.Proud.Marshaler.Read(__msg, out chat);
            core.PostCheckReadMessage(__msg, RmiName_ChatToPerson);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += personId.ToString() + ",";
                parameterString += chat.ToString() + ",";
                NotifyCallFromStub(Common.ChatToPerson, RmiName_ChatToPerson, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.ChatToPerson;
                summary.rmiName = RmiName_ChatToPerson;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = ChatToPerson(remote, ctx, id, personId, chat);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_ChatToPerson);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.ChatToPerson;
                summary.rmiName = RmiName_ChatToPerson;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CreateRoom(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string roomName; Nettention.Proud.Marshaler.Read(__msg, out roomName);
            string pw; Nettention.Proud.Marshaler.Read(__msg, out pw);
            core.PostCheckReadMessage(__msg, RmiName_CreateRoom);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += roomName.ToString() + ",";
                parameterString += pw.ToString() + ",";
                NotifyCallFromStub(Common.CreateRoom, RmiName_CreateRoom, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CreateRoom;
                summary.rmiName = RmiName_CreateRoom;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CreateRoom(remote, ctx, id, roomName, pw);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CreateRoom);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CreateRoom;
                summary.rmiName = RmiName_CreateRoom;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GetRoomDatas(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GetRoomDatas);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GetRoomDatas, RmiName_GetRoomDatas, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GetRoomDatas;
                summary.rmiName = RmiName_GetRoomDatas;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GetRoomDatas(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GetRoomDatas);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GetRoomDatas;
                summary.rmiName = RmiName_GetRoomDatas;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GameReady(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            core.PostCheckReadMessage(__msg, RmiName_GameReady);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                NotifyCallFromStub(Common.GameReady, RmiName_GameReady, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GameReady;
                summary.rmiName = RmiName_GameReady;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GameReady(remote, ctx, id);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GameReady);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GameReady;
                summary.rmiName = RmiName_GameReady;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            core.PostCheckReadMessage(__msg, RmiName_GameStart);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                NotifyCallFromStub(Common.GameStart, RmiName_GameStart, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GameStart;
                summary.rmiName = RmiName_GameStart;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GameStart(remote, ctx, id);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GameStart);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GameStart;
                summary.rmiName = RmiName_GameStart;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_RecordPosition(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            float x; Nettention.Proud.Marshaler.Read(__msg, out x);
            float y; Nettention.Proud.Marshaler.Read(__msg, out y);
            float z; Nettention.Proud.Marshaler.Read(__msg, out z);
            core.PostCheckReadMessage(__msg, RmiName_RecordPosition);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += x.ToString() + ",";
                parameterString += y.ToString() + ",";
                parameterString += z.ToString() + ",";
                NotifyCallFromStub(Common.RecordPosition, RmiName_RecordPosition, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.RecordPosition;
                summary.rmiName = RmiName_RecordPosition;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = RecordPosition(remote, ctx, id, x, y, z);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_RecordPosition);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.RecordPosition;
                summary.rmiName = RmiName_RecordPosition;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SignUp="SignUp";
public const string RmiName_LogIn="LogIn";
public const string RmiName_ChatToAll="ChatToAll";
public const string RmiName_ChatToRoom="ChatToRoom";
public const string RmiName_ChatToPerson="ChatToPerson";
public const string RmiName_CreateRoom="CreateRoom";
public const string RmiName_GetRoomDatas="GetRoomDatas";
public const string RmiName_GameReady="GameReady";
public const string RmiName_GameStart="GameStart";
public const string RmiName_RecordPosition="RecordPosition";
       
public const string RmiName_First = RmiName_SignUp;
#else
        // RMI name declaration.
        // It is the unique pointer that indicates RMI name such as RMI profiler.
        public const string RmiName_SignUp = "";
        public const string RmiName_LogIn = "";
        public const string RmiName_ChatToAll = "";
        public const string RmiName_ChatToRoom = "";
        public const string RmiName_ChatToPerson = "";
        public const string RmiName_CreateRoom = "";
        public const string RmiName_GetRoomDatas = "";
        public const string RmiName_GameReady = "";
        public const string RmiName_GameStart = "";
        public const string RmiName_RecordPosition = "";

        public const string RmiName_First = "";
#endif

        public override Nettention.Proud.RmiID[] GetRmiIDList { get { return Common.RmiIDList; } }

    }
}
namespace S2C
{
    public class Stub : Nettention.Proud.RmiStub
    {
        public AfterRmiInvocationDelegate AfterRmiInvocation = delegate (Nettention.Proud.AfterRmiSummary summary) { };
        public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate (Nettention.Proud.BeforeRmiSummary summary) { };

        public delegate bool SignUpResultDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, bool isSuccess);
        public SignUpResultDelegate SignUpResult = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, bool isSuccess)
        {
            return false;
        };
        public delegate bool LoginResultDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, bool isSuccess);
        public LoginResultDelegate LoginResult = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, bool isSuccess)
        {
            return false;
        };
        public delegate bool EchoToAllDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string chat);
        public EchoToAllDelegate EchoToAll = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string chat)
        {
            return false;
        };
        public delegate bool EchoToRoomDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomId, string chat);
        public EchoToRoomDelegate EchoToRoom = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomId, string chat)
        {
            return false;
        };
        public delegate bool EchoToPersonDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string personId, string chat);
        public EchoToPersonDelegate EchoToPerson = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string personId, string chat)
        {
            return false;
        };
        public delegate bool CreateRoomResultDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomName, bool isSuccess);
        public CreateRoomResultDelegate CreateRoomResult = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, string roomName, bool isSuccess)
        {
            return false;
        };
        public delegate bool GetRoomDatasDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string json);
        public GetRoomDatasDelegate GetRoomDatas = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string json)
        {
            return false;
        };
        public delegate bool GameReadyReflectionDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id);
        public GameReadyReflectionDelegate GameReadyReflection = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id)
        {
            return false;
        };
        public delegate bool GameStartReflectionDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id);
        public GameStartReflectionDelegate GameStartReflection = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id)
        {
            return false;
        };
        public delegate bool PositionReflectionDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, float x, float y, float z);
        public PositionReflectionDelegate PositionReflection = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string id, float x, float y, float z)
        {
            return false;
        };
        public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag)
        {
            Nettention.Proud.HostID remote = pa.RemoteHostID;
            if (remote == Nettention.Proud.HostID.HostID_None)
            {
                ShowUnknownHostIDWarning(remote);
            }

            Nettention.Proud.Message __msg = pa.ReadOnlyMessage;
            int orgReadOffset = __msg.ReadOffset;
            Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
            if (!__msg.Read(out __rmiID))
                goto __fail;

            switch (__rmiID)
            {
                case Common.SignUpResult:
                    ProcessReceivedMessage_SignUpResult(__msg, pa, hostTag, remote);
                    break;
                case Common.LoginResult:
                    ProcessReceivedMessage_LoginResult(__msg, pa, hostTag, remote);
                    break;
                case Common.EchoToAll:
                    ProcessReceivedMessage_EchoToAll(__msg, pa, hostTag, remote);
                    break;
                case Common.EchoToRoom:
                    ProcessReceivedMessage_EchoToRoom(__msg, pa, hostTag, remote);
                    break;
                case Common.EchoToPerson:
                    ProcessReceivedMessage_EchoToPerson(__msg, pa, hostTag, remote);
                    break;
                case Common.CreateRoomResult:
                    ProcessReceivedMessage_CreateRoomResult(__msg, pa, hostTag, remote);
                    break;
                case Common.GetRoomDatas:
                    ProcessReceivedMessage_GetRoomDatas(__msg, pa, hostTag, remote);
                    break;
                case Common.GameReadyReflection:
                    ProcessReceivedMessage_GameReadyReflection(__msg, pa, hostTag, remote);
                    break;
                case Common.GameStartReflection:
                    ProcessReceivedMessage_GameStartReflection(__msg, pa, hostTag, remote);
                    break;
                case Common.PositionReflection:
                    ProcessReceivedMessage_PositionReflection(__msg, pa, hostTag, remote);
                    break;
                default:
                    goto __fail;
            }
            return true;
        __fail:
            {
                __msg.ReadOffset = orgReadOffset;
                return false;
            }
        }
        void ProcessReceivedMessage_SignUpResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            bool isSuccess; Nettention.Proud.Marshaler.Read(__msg, out isSuccess);
            core.PostCheckReadMessage(__msg, RmiName_SignUpResult);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += isSuccess.ToString() + ",";
                NotifyCallFromStub(Common.SignUpResult, RmiName_SignUpResult, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.SignUpResult;
                summary.rmiName = RmiName_SignUpResult;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = SignUpResult(remote, ctx, id, isSuccess);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_SignUpResult);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.SignUpResult;
                summary.rmiName = RmiName_SignUpResult;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_LoginResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            bool isSuccess; Nettention.Proud.Marshaler.Read(__msg, out isSuccess);
            core.PostCheckReadMessage(__msg, RmiName_LoginResult);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += isSuccess.ToString() + ",";
                NotifyCallFromStub(Common.LoginResult, RmiName_LoginResult, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.LoginResult;
                summary.rmiName = RmiName_LoginResult;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = LoginResult(remote, ctx, id, isSuccess);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_LoginResult);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.LoginResult;
                summary.rmiName = RmiName_LoginResult;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_EchoToAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string chat; Nettention.Proud.Marshaler.Read(__msg, out chat);
            core.PostCheckReadMessage(__msg, RmiName_EchoToAll);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += chat.ToString() + ",";
                NotifyCallFromStub(Common.EchoToAll, RmiName_EchoToAll, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.EchoToAll;
                summary.rmiName = RmiName_EchoToAll;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = EchoToAll(remote, ctx, id, chat);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_EchoToAll);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.EchoToAll;
                summary.rmiName = RmiName_EchoToAll;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_EchoToRoom(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string roomId; Nettention.Proud.Marshaler.Read(__msg, out roomId);
            string chat; Nettention.Proud.Marshaler.Read(__msg, out chat);
            core.PostCheckReadMessage(__msg, RmiName_EchoToRoom);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += roomId.ToString() + ",";
                parameterString += chat.ToString() + ",";
                NotifyCallFromStub(Common.EchoToRoom, RmiName_EchoToRoom, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.EchoToRoom;
                summary.rmiName = RmiName_EchoToRoom;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = EchoToRoom(remote, ctx, id, roomId, chat);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_EchoToRoom);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.EchoToRoom;
                summary.rmiName = RmiName_EchoToRoom;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_EchoToPerson(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string personId; Nettention.Proud.Marshaler.Read(__msg, out personId);
            string chat; Nettention.Proud.Marshaler.Read(__msg, out chat);
            core.PostCheckReadMessage(__msg, RmiName_EchoToPerson);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += personId.ToString() + ",";
                parameterString += chat.ToString() + ",";
                NotifyCallFromStub(Common.EchoToPerson, RmiName_EchoToPerson, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.EchoToPerson;
                summary.rmiName = RmiName_EchoToPerson;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = EchoToPerson(remote, ctx, id, personId, chat);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_EchoToPerson);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.EchoToPerson;
                summary.rmiName = RmiName_EchoToPerson;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CreateRoomResult(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            string roomName; Nettention.Proud.Marshaler.Read(__msg, out roomName);
            bool isSuccess; Nettention.Proud.Marshaler.Read(__msg, out isSuccess);
            core.PostCheckReadMessage(__msg, RmiName_CreateRoomResult);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += roomName.ToString() + ",";
                parameterString += isSuccess.ToString() + ",";
                NotifyCallFromStub(Common.CreateRoomResult, RmiName_CreateRoomResult, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CreateRoomResult;
                summary.rmiName = RmiName_CreateRoomResult;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CreateRoomResult(remote, ctx, id, roomName, isSuccess);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CreateRoomResult);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CreateRoomResult;
                summary.rmiName = RmiName_CreateRoomResult;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GetRoomDatas(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string json; Nettention.Proud.Marshaler.Read(__msg, out json);
            core.PostCheckReadMessage(__msg, RmiName_GetRoomDatas);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += json.ToString() + ",";
                NotifyCallFromStub(Common.GetRoomDatas, RmiName_GetRoomDatas, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GetRoomDatas;
                summary.rmiName = RmiName_GetRoomDatas;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GetRoomDatas(remote, ctx, json);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GetRoomDatas);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GetRoomDatas;
                summary.rmiName = RmiName_GetRoomDatas;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GameReadyReflection(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            core.PostCheckReadMessage(__msg, RmiName_GameReadyReflection);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                NotifyCallFromStub(Common.GameReadyReflection, RmiName_GameReadyReflection, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GameReadyReflection;
                summary.rmiName = RmiName_GameReadyReflection;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GameReadyReflection(remote, ctx, id);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GameReadyReflection);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GameReadyReflection;
                summary.rmiName = RmiName_GameReadyReflection;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GameStartReflection(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            core.PostCheckReadMessage(__msg, RmiName_GameStartReflection);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                NotifyCallFromStub(Common.GameStartReflection, RmiName_GameStartReflection, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GameStartReflection;
                summary.rmiName = RmiName_GameStartReflection;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GameStartReflection(remote, ctx, id);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GameStartReflection);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GameStartReflection;
                summary.rmiName = RmiName_GameStartReflection;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_PositionReflection(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string id; Nettention.Proud.Marshaler.Read(__msg, out id);
            float x; Nettention.Proud.Marshaler.Read(__msg, out x);
            float y; Nettention.Proud.Marshaler.Read(__msg, out y);
            float z; Nettention.Proud.Marshaler.Read(__msg, out z);
            core.PostCheckReadMessage(__msg, RmiName_PositionReflection);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += id.ToString() + ",";
                parameterString += x.ToString() + ",";
                parameterString += y.ToString() + ",";
                parameterString += z.ToString() + ",";
                NotifyCallFromStub(Common.PositionReflection, RmiName_PositionReflection, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.PositionReflection;
                summary.rmiName = RmiName_PositionReflection;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = PositionReflection(remote, ctx, id, x, y, z);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_PositionReflection);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.PositionReflection;
                summary.rmiName = RmiName_PositionReflection;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SignUpResult="SignUpResult";
public const string RmiName_LoginResult="LoginResult";
public const string RmiName_EchoToAll="EchoToAll";
public const string RmiName_EchoToRoom="EchoToRoom";
public const string RmiName_EchoToPerson="EchoToPerson";
public const string RmiName_CreateRoomResult="CreateRoomResult";
public const string RmiName_GetRoomDatas="GetRoomDatas";
public const string RmiName_GameReadyReflection="GameReadyReflection";
public const string RmiName_GameStartReflection="GameStartReflection";
public const string RmiName_PositionReflection="PositionReflection";
       
public const string RmiName_First = RmiName_SignUpResult;
#else
        // RMI name declaration.
        // It is the unique pointer that indicates RMI name such as RMI profiler.
        public const string RmiName_SignUpResult = "";
        public const string RmiName_LoginResult = "";
        public const string RmiName_EchoToAll = "";
        public const string RmiName_EchoToRoom = "";
        public const string RmiName_EchoToPerson = "";
        public const string RmiName_CreateRoomResult = "";
        public const string RmiName_GetRoomDatas = "";
        public const string RmiName_GameReadyReflection = "";
        public const string RmiName_GameStartReflection = "";
        public const string RmiName_PositionReflection = "";

        public const string RmiName_First = "";
#endif

        public override Nettention.Proud.RmiID[] GetRmiIDList { get { return Common.RmiIDList; } }

    }
}

